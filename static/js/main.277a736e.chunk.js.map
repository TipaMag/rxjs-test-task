{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["temperature","EventEmitter","pressure","humidity","subject1$","Subject","subject2$","subject3$","randomDelay","min","max","Math","floor","random","combine","combineLatest","pipe","map","x","console","log","JSON","stringify","temp","delay","press","hum","auditTime","on","next","tempEmitter","rand","setTimeout","emit","pressEmitter","humEmitter","App","useState","state","setState","useEffect","sub","subscribe","unsubscribe","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6RAQMA,EAAc,IAAIC,IAClBC,EAAW,IAAID,IACfE,EAAW,IAAIF,IAEfG,EAAY,IAAIC,IAChBC,EAAY,IAAID,IAChBE,EAAY,IAAIF,IAEhBG,EAAc,SAACC,EAAKC,GAAN,OAAcC,KAAKC,MAAMD,KAAKE,UAAY,EAAIH,EAAMD,IAAQA,GAE1EK,EAAUC,YAAc,CAACX,EAAWE,EAAWC,IAAYS,KAC/DC,aAAI,SAAAC,GAEF,OADAC,QAAQC,IAAIC,KAAKC,UAAUJ,IACpBA,KAETD,aAAI,SAACC,GACH,MAAO,CACLK,KAAML,EAAE,GAAGM,MAAQ,IAAON,EAAE,GAAGK,KAAO,QACtCE,MAAOP,EAAE,GAAGM,MAAQ,IAAON,EAAE,GAAGO,MAAQ,QACxCC,IAAKR,EAAE,GAAGM,MAAQ,IAAON,EAAE,GAAGQ,IAAM,YAGxCC,YAAU,MAGZ3B,EAAY4B,GAAG,QAAQ,SAACL,GAAD,OAAUnB,EAAUyB,KAAK,CAAEN,KAAMA,EAAMC,MAAOD,OACrErB,EAAS0B,GAAG,SAAS,SAACH,GAAD,OAAWnB,EAAUuB,KAAK,CAAEJ,MAAOA,EAAOD,MAAOC,OACtEtB,EAASyB,GAAG,OAAO,SAACF,GAAD,OAASnB,EAAUsB,KAAK,CAAEH,IAAKA,EAAKF,MAAOE,OAE9D,SAASI,IACP,IAAIC,EAAOvB,EAAY,IAAK,KAC5BwB,YAAW,WACThC,EAAYiC,KAAK,OAAQF,GACzBD,MACCC,GAELD,GAEA,SAASI,IACP,IAAIH,EAAOvB,EAAY,IAAK,KAC5BwB,YAAW,WACT9B,EAAS+B,KAAK,QAASF,GACvBG,MACCH,GAELG,GAEA,SAASC,IACP,IAAIJ,EAAOvB,EAAY,IAAK,KAC5BwB,YAAW,WACT7B,EAAS8B,KAAK,MAAOF,GACrBI,MACCJ,GAELI,GAIO,IAAMC,EAAM,WAAO,IAAD,EACGC,mBAAS,CACjCd,KAAM,EACNE,MAAO,EACPC,IAAK,IAJgB,mBAChBY,EADgB,KACTC,EADS,KAYvB,OALAC,qBAAU,WACR,IAAIC,EAAM3B,EAAQ4B,WAAU,SAACxB,GAAD,OAAOqB,EAASrB,MAC5C,OAAO,kBAAMuB,EAAIE,iBAChB,IAGD,qBAAKC,UAAU,MAAf,SAEE,sBAAKA,UAAU,UAAf,UACE,gDAAkB,qCAAQN,EAAMf,WAChC,iDAAmB,qCAAQe,EAAMb,YACjC,6CAAe,qCAAQa,EAAMZ,gBCxEtBmB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.277a736e.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\"\nimport './App.css'\n\nimport { Subject, combineLatest } from \"rxjs\"\nimport { map, auditTime } from \"rxjs/operators\"\n\nimport EventEmitter from \"events\"\n\nconst temperature = new EventEmitter()\nconst pressure = new EventEmitter()\nconst humidity = new EventEmitter()\n\nconst subject1$ = new Subject()\nconst subject2$ = new Subject()\nconst subject3$ = new Subject()\n\nconst randomDelay = (min, max) => Math.floor(Math.random() * (1 + max - min)) + min\n\nconst combine = combineLatest([subject1$, subject2$, subject3$]).pipe(\n  map(x => {\n    console.log(JSON.stringify(x))\n    return x\n  }),\n  map((x) => {\n    return {\n      temp: x[0].delay > 1000 ? x[0].temp : \"N / A\",\n      press: x[1].delay > 1000 ? x[1].press : \"N / A\",\n      hum: x[2].delay > 1000 ? x[2].hum : \"N / A\"\n    };\n  }),\n  auditTime(100)\n)\n\ntemperature.on(\"temp\", (temp) => subject1$.next({ temp: temp, delay: temp }))\npressure.on(\"press\", (press) => subject2$.next({ press: press, delay: press }))\nhumidity.on(\"hum\", (hum) => subject3$.next({ hum: hum, delay: hum }))\n\nfunction tempEmitter() {\n  let rand = randomDelay(100, 2000)\n  setTimeout(() => {\n    temperature.emit(\"temp\", rand)\n    tempEmitter()\n  }, rand)\n}\ntempEmitter()\n\nfunction pressEmitter() {\n  let rand = randomDelay(100, 2000)\n  setTimeout(() => {\n    pressure.emit(\"press\", rand)\n    pressEmitter()\n  }, rand)\n}\npressEmitter()\n\nfunction humEmitter() {\n  let rand = randomDelay(100, 2000)\n  setTimeout(() => {\n    humidity.emit(\"hum\", rand)\n    humEmitter()\n  }, rand)\n}\nhumEmitter()\n\n\n\nexport const App = () => {\n  const [state, setState] = useState({\n    temp: 0,\n    press: 0,\n    hum: 0\n  })\n\n  useEffect(() => {\n    let sub = combine.subscribe((x) => setState(x))\n    return () => sub.unsubscribe()\n  }, [])\n\n  return (\n    <div className=\"App\">\n\n      <div className=\"monitor\">\n        <div>temperature: <span> {state.temp}</span></div>\n        <div>Air pressure: <span> {state.press}</span></div>\n        <div>Humidity: <span> {state.hum}</span></div>\n      </div>\n\n    </div>\n  )\n}","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { App } from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}